// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// KinVcf
NumericMatrix KinVcf(std::string filename, std::string field, bool adjust, bool domi, bool constr);
RcppExport SEXP _LowKi_KinVcf(SEXP filenameSEXP, SEXP fieldSEXP, SEXP adjustSEXP, SEXP domiSEXP, SEXP constrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< bool >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< bool >::type domi(domiSEXP);
    Rcpp::traits::input_parameter< bool >::type constr(constrSEXP);
    rcpp_result_gen = Rcpp::wrap(KinVcf(filename, field, adjust, domi, constr));
    return rcpp_result_gen;
END_RCPP
}
// PartialKinVcf
NumericMatrix PartialKinVcf(std::string filename, IntegerVector Index, std::string field, bool adjust, bool domi, bool constr);
RcppExport SEXP _LowKi_PartialKinVcf(SEXP filenameSEXP, SEXP IndexSEXP, SEXP fieldSEXP, SEXP adjustSEXP, SEXP domiSEXP, SEXP constrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< bool >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< bool >::type domi(domiSEXP);
    Rcpp::traits::input_parameter< bool >::type constr(constrSEXP);
    rcpp_result_gen = Rcpp::wrap(PartialKinVcf(filename, Index, field, adjust, domi, constr));
    return rcpp_result_gen;
END_RCPP
}
// RawKinVcf
NumericMatrix RawKinVcf(std::string filename, std::string field, bool domi);
RcppExport SEXP _LowKi_RawKinVcf(SEXP filenameSEXP, SEXP fieldSEXP, SEXP domiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< bool >::type domi(domiSEXP);
    rcpp_result_gen = Rcpp::wrap(RawKinVcf(filename, field, domi));
    return rcpp_result_gen;
END_RCPP
}
// vcfAlleleFreq
List vcfAlleleFreq(std::string filename);
RcppExport SEXP _LowKi_vcfAlleleFreq(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(vcfAlleleFreq(filename));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LowKi_KinVcf", (DL_FUNC) &_LowKi_KinVcf, 5},
    {"_LowKi_PartialKinVcf", (DL_FUNC) &_LowKi_PartialKinVcf, 6},
    {"_LowKi_RawKinVcf", (DL_FUNC) &_LowKi_RawKinVcf, 3},
    {"_LowKi_vcfAlleleFreq", (DL_FUNC) &_LowKi_vcfAlleleFreq, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_LowKi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PartialKinVcfClassic
NumericMatrix PartialKinVcfClassic(std::string filename, IntegerVector Index, std::string field, NumericVector q, bool adjust, bool domi, bool constr);
RcppExport SEXP _LowKi_PartialKinVcfClassic(SEXP filenameSEXP, SEXP IndexSEXP, SEXP fieldSEXP, SEXP qSEXP, SEXP adjustSEXP, SEXP domiSEXP, SEXP constrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< bool >::type domi(domiSEXP);
    Rcpp::traits::input_parameter< bool >::type constr(constrSEXP);
    rcpp_result_gen = Rcpp::wrap(PartialKinVcfClassic(filename, Index, field, q, adjust, domi, constr));
    return rcpp_result_gen;
END_RCPP
}
// RawKinVcfClassic
NumericMatrix RawKinVcfClassic(std::string filename, std::string field, NumericVector q, bool domi);
RcppExport SEXP _LowKi_RawKinVcfClassic(SEXP filenameSEXP, SEXP fieldSEXP, SEXP qSEXP, SEXP domiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type domi(domiSEXP);
    rcpp_result_gen = Rcpp::wrap(RawKinVcfClassic(filename, field, q, domi));
    return rcpp_result_gen;
END_RCPP
}
// PartialKinVcfLoki
NumericMatrix PartialKinVcfLoki(std::string filename, IntegerVector Index, std::string field, bool adjust, bool domi, bool constr);
RcppExport SEXP _LowKi_PartialKinVcfLoki(SEXP filenameSEXP, SEXP IndexSEXP, SEXP fieldSEXP, SEXP adjustSEXP, SEXP domiSEXP, SEXP constrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< bool >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< bool >::type domi(domiSEXP);
    Rcpp::traits::input_parameter< bool >::type constr(constrSEXP);
    rcpp_result_gen = Rcpp::wrap(PartialKinVcfLoki(filename, Index, field, adjust, domi, constr));
    return rcpp_result_gen;
END_RCPP
}
// RawKinVcfLoki
NumericMatrix RawKinVcfLoki(std::string filename, std::string field, bool domi);
RcppExport SEXP _LowKi_RawKinVcfLoki(SEXP filenameSEXP, SEXP fieldSEXP, SEXP domiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< bool >::type domi(domiSEXP);
    rcpp_result_gen = Rcpp::wrap(RawKinVcfLoki(filename, field, domi));
    return rcpp_result_gen;
END_RCPP
}
// vcfAlleleFreqAD
List vcfAlleleFreqAD(std::string filename);
RcppExport SEXP _LowKi_vcfAlleleFreqAD(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(vcfAlleleFreqAD(filename));
    return rcpp_result_gen;
END_RCPP
}
// vcfAlleleFreqPr
List vcfAlleleFreqPr(std::string filename, std::string field);
RcppExport SEXP _LowKi_vcfAlleleFreqPr(SEXP filenameSEXP, SEXP fieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type field(fieldSEXP);
    rcpp_result_gen = Rcpp::wrap(vcfAlleleFreqPr(filename, field));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LowKi_PartialKinVcfClassic", (DL_FUNC) &_LowKi_PartialKinVcfClassic, 7},
    {"_LowKi_RawKinVcfClassic", (DL_FUNC) &_LowKi_RawKinVcfClassic, 4},
    {"_LowKi_PartialKinVcfLoki", (DL_FUNC) &_LowKi_PartialKinVcfLoki, 6},
    {"_LowKi_RawKinVcfLoki", (DL_FUNC) &_LowKi_RawKinVcfLoki, 3},
    {"_LowKi_vcfAlleleFreqAD", (DL_FUNC) &_LowKi_vcfAlleleFreqAD, 1},
    {"_LowKi_vcfAlleleFreqPr", (DL_FUNC) &_LowKi_vcfAlleleFreqPr, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_LowKi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
